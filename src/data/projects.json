[
	{
		"title" : "Go-email",
		"time" : "2020",
		"description" : "Developed an open-source library that interfaces with various IMAP, SMTP, and OAuth implementations in Go, to facilitate email app development.",
		"outline" : "from-red-400 to-yellow-500",
		"tags": ["Golang"],
		"expanded": [
			{"title": "Go-email"},
			{"subheading":"Purpose:"},
			{"desc": "The purpose of this library is to provide a simple way to interact with SMTP and IMAP servers by providing an easy to use wrapper around existing SMTP and IMAP implementations in Go. The existing implementations provide a lot of flexibility, however, with that comes a steep learning curve for developers. This library provides easy to use functions that encompass the most common features of SMTP and IMAP. It also works with XOauth2 as most major email providers support this authentication protocol and it is more secure compared to using usernames and passwords."},
			{"subheading":"Implemented Features"},
			{"desc": "This library currently supports two methods to authenticate. One using the user's password and email, and one using their email and token. The library also supports the openID flow to get tokens. In terms of IMPAP, the libray supports getting a range of email envelopes that contain information like sender/reciever, cc, bcc, time, etc. From these envelopes, the developer can also call a seperate function to grab the message content, formatted as a slice of message parts (because messages can be a combination of text, files, images, etc). The last IMAP feature is the easy to use and comprehensive search feature. The library also supports sending simple emails over SMTP."},
			{"subheading":"Future Changes/Updates"},
			{"desc": "There are quite a few changes I want to make to this library. It was developed to aid with another project I was working on, so while it does work well and meet its original purpose, there are things that I'd like to add to it. First of all, I'd like to improve the documentation of this project. I want to make the README comprehensive and clear and I'd like to comment all of the functions and remove commented out functions and code. I'd also like to fix some formatting issues with the code. In terms of functionality I'd like to improve the SMTP functionality. It met my requirements at the time, but it could be better to meet more developer's requirements. Depending on the existing STMP implementations in Go, I may have to improve one or make my own to add this feature to go-email."},
			{"subheading":"Links"},
			{"link": "https://github.com/AadityaChaudhary/go-email", "txt": "Github Link"}

		]
	},
	
	{
		"title" : "Hornet Motor Controller",
		"time" : "2020",
		"description" : "Developing of a motor controller for brushed and brushless motors with features such as built-in PIDF feedback control, triangle, trapezoidal, and s-curve motion profile generation, and encoder feedback. It can interface with other devices using UART and CAN, and can be controlled via CAN or PWM." ,
		"outline" : "from-yellow-400 to-green-500",
		"tags": ["C++", "Python"],
		"expanded": [
			{"title" : "Hornet Brushed and Brushless Motor Controller"},
			{"src" : "hornet/OpenCase.JPG", "alt": "Expanded view of the controller"},
			{"subheading": "Purpose"},
			{"desc": "The purpose of this project was to create a motor controller that can be used to drive both brushed and brushless motors, perform PIDF feedback control, generate motion profiles and interface over CAN, PWM, and UART. We wanted to replicate and build on features that we used in FRC with controllers like the Spark MAX and the CTRE Talon."},
			{"subheading": "Features"},
			{"desc": "This project is still in development, however so far, from a hardware perspective, the motor controller supports UART and CAN communication, can take input via PWM, can be connected directly to a quad encoder, can accept up to 24V and output that to both brushed and brushless motors, and it can “brake” the motors as well. From a software perspective, the built in PIDF is supported, motion profile generators for trapezoidal and triangular profiles are supported, drivers for quad encoders, CAN, UART, and PWM input and output is also written. The driver for brushed motor output is also written."},
			{"desc": "This project makes use of a stm32f4 as its core, which was chosen as it meets our requirements for speed, has the necessary amount of timers, has support for CAN and for FreeRTOS. "},
			{"subheading": "Future features"},
			{"desc" : "Software features that we need to implement include the brushless driver and the state machine that controls the motor and makes use of the drivers. Another software improvement is support for S-curve motion profiles, the algorithm for which is currently in development"},
			{"desc" : "Hardware updates that we are looking into for version 2, include using a lower cost chip and adding another CAN line to the board so that the controller can be daisy chained over can."},
			{"subheading":"Images"},
			{"src" : "hornet/AngledView.JPG", "alt": "Angled view of the controller"},
			{"src" : "hornet/TopView.JPG", "alt": "Top view of the controller"},
			{"subheading":"Links"},
			{"link" : "https://github.com/sahil-kale/MotorController" , "txt" : "Github Link"}
		]
	},
	{
		"title" : "Jubilee",
		"time" : "2020",
		"description" : "Developed a code-free automation tool for quality assurance website testing using the selenium web driver. This is a rewritten and improved version of the web testing tool that was developed for Inovex Inc. that uses JSON files to track commands such as clicking an element, entering text, scrolling to an element, etc.",
		"outline" : "from-green-400 to-blue-500",
		"tags": ["Golang"],
		"expanded": [
		{"title" : "Jubilee"},
		{"subheading" : "Purpose"},
		{"desc" : "The purpose for this project was to create an easy to use code free way to test websites. It’s based on a simple tool I wrote at my coop at Inovex Inc to automate the testing of web forms. I rewrote that tool in Go (It was originally C#) and decided to use json files to write the commands instead of text files (which I was originally using), as json is more convenient and it’s easier to build onto json when creating new features."},
		{"subheading": "Features"},
		{"desc" : "Jubilee currently has support for several commands, namely open (opening a website link), click (click on an element), type (type a string into an element) and waitfor (waits for an element to appear) and find (returns the values in an html element). These commands combined allow for powerful web form automation and testing. Jubilee can identify html elements based on their id, link, or xpath. Jubilee currently uses JSON files to hold the command list that will be executed. All of the selenium configs are stored in each json file. This means that multiple versions of selenium or browser drivers can be used, just by modifying some parameters in the input json."},
		{"subheading" : "Future Features"},
		{"desc" : "While Jubilee works well for web form automation and simple website action automation, it would be much more powerful if it had the ability to store variables, and use if statements and loops. That is why I’m planning on extending it to be a full “language” but written all in json. The benefits of this is that it can still perform simple actions and be code free. I can eventually add a frontend to jubilee as well, and allow these json automation scripts to be generated by a drag and drop web interface (kind of like Scratch!). I could also extend jubilee into a full programming language as the JSON set up resembles an Abstract Syntax Tree."},
		{"subheading":"Links"},
		{"link" : "https://github.com/AadityaChaudhary/jubilee", "txt" : "Github Link"}
		]
	},

	{
		"title" : "Quinoa",
		"time" : "2020",
		"description" : "Developed a smart personal scheduling app that learns from the user and suggests times to schedule events based on past decisions the user has made using machine learning. This was made for HackTheNortheast and won the machine learning prize.",
		"outline" : "from-blue-400 to-indigo-600",
		"tags": ["Flutter", "Dart", "Tensorflow"],
		"expanded": [
			{"title" : "Quinoa"},
			{"id": "qlY9JKgkDwM"},
			{"subheading" : "Purpose"},
			{"desc" : "Quinoa is a personal assistant scheduling app that can automatically schedule events according to user preferences. It does this by learning what times the user would like to schedule specific events with a custom machine learning model designed specifically to learn how to schedule events over time."},
			{"subheading" : "Features" },
			{"desc" : " Quinoa is made up of 3 parts. The first is a backend written with Kotlin that stores a user's calendar in a MongDB database. This backend serves the users schedule to the other components in the system. When a user schedules an event the the backend records it and starts “learning” how the user prefers to set up their schedule. For example if the user schedules a party on friday night from 7pm to midnight, the backend records that event and then records that the user prefers leisure activities on friday nights. The next time the user asks for a time to schedule a party, the backend will suggest friday night."},
			{"desc" : "The main frontend of the project is a mobile app that runs on ios and android, built with Flutter. The app is responsible for displaying the schedule, and taking input from the user. It uses a Tensorflow model to classify the type of event that the user registers. So, if a user wants to schedule a study group meeting on a specific day, the app will identify that the event is for school, and will ask the backend for a time slot for a school event on a certain day. The backend sends a potential time slot and the app presents that to the user. If it’s rejected by the user, the app tells the backend and requests another slot. The model learns from both time slot approvals and rejections. "},
			{"desc" : "The third part is the alexa application. This application uses AWS Lambda to allow the alexa to function in the same way as the app, but without the event classifier. Without that classifier the type of the event is determined by keywords in the event."},
			{"subheading" : "Awards" },
			{"desc" : "This project won a machine learning prize at Hack the Northeast. It also won the 1517 prize, which is a grant of 11k dollars in cash and AWS credits."},
			{"subheading" : "Links"},
			{"link": "https://devpost.com/software/quinoa-your-virtual-secretary", "txt" : "Devpost Link"},
			{"link": "https://github.com/LunarCoffee/Quinoa", "txt" : "Backend Code"},
			{"link": "https://github.com/AadityaChaudhary/PersonalAssistantApp/", "txt" : "Flutter App Code"},
			{"link": "https://github.com/1whatleytay/quinoa/", "txt" : "Alexa Code"}		
		]
	},

	{
		"title" : "FRC Scouting App",
		"time" : "2018-2020",
		"description" : "Developed a data collection app to facilitate the recording, organizing, and uploading of scouting data gathered by FRC teams. Data was collected on an app made in a flutter, and uploaded to a Firebase NoSql database, and organized using Firebase Functions written in Javascript. The App was later modified to use QR codes to transfer data and SQLite databases to store data.",
		"outline" : "from-indigo-400 to-pink-500",
		"tags": ["Flutter", "Dart", "JavaScript", "SQL", "Firebase"],
		"expanded": [
			{"title" : "FIRST Robotics Scouting App"},
			{"subheading" : "Purpose"},
			{"desc" : "At First Robotics Competitions, teams record data on other teams, to identify opponent strengths and weaknesses. Scouting is used to aid the drivers in deciding their strategy. It’s also used to identify and compare teams so that when it comes time to choose teams to form alliances with, we know what teams we’d like in our alliance/ which alliance we’d like to be picked for."},
			{"subheading": "Scouting app V1"},
			{"desc" : "The first version of the system was written in Flutter and used Firebase to store the scouting data. Two apps were made, a scouter app and a head scouter app. The standard scouter app basically opened a form that allowed the scouter to enter in details from the match and team they were scouting. They could then hit a submit button to upload the data to the database. The head scouter app retrieved data from the firebase database. The head scouter app could also sort the data based on specific values, like points scored, team number, match number, etc. This app was used in the strategy meetings to help choose teams for the alliance. It was also used by drivers to quickly pull up information on the teams they would be facing in the next match."},
			{"subheading": "Scouting app V2"},
			{"desc" : "The second version of the system had massive changes. First of all, we removed firebase from the system. This is because we would be relying on scouters cell phone plans to send the data to the cloud database. When we went to the world championships in detroit, almost none of our team members had data. We would also hit our quotas and that resulted in loss of data.  V2 of the app used SQLite to store the data directly on the phones, and QR codes were used to pass the scouting data from scouters to the head scouter. We also only had 1 app, rather than a separate scouter and head scouter app. If data had to be sent over long distances (for example, from the scouters to the robot driveteam), the data could be exported as text and sent in an email or instant message. The receiving person could just copy that text into their scouting app and to get all the data. Besides these changes, the base functionality of the app was kept the same."},	
			{"subheading" : "Images"},
			{"src" :"scouting_app/scouting_app_1.jpg", "alt" : "main menu of scouting app V2"},
			{"src": "scouting_app/scouting_app_2.jpg", "alt":"scouting form in scouting app V2"},
			{"src": "scouting_app/scouting_app_3.jpg", "alt":"QR code generation in scouting app V2"}
		]
	},

	{
		"title" : "Spaceapps competition submission",
		"time" : "2020",
		"description" : "Developed the front end for a site that uses Machine Learning topredict whether a city will be a covid hotspot given certain parameters. Also did data collection for the ML model, and worked on the python backend",
		"outline" : "from-pink-400 to-red-500",
		"tags": ["Flutter", "Python"],
		"expanded": [
			{"title" : "Spaceapps Competition"},
			{"subheading" : "Purpose"},
			{"desc" : "The point of the competition was to utilize data gathered by different government agencies (such as NASA) to aid with the covid outbreak in some way. My team decided to make a website that could predict if your town will become a covid hotspot based on past data of covid hotspots."},
			{"subheading": "Features"},
			{"desc" : "The website was written with flutter, and asked the user for information about their city. These values would be sent to a flask server where they would be passed into a classifier trained using data provided by different government agencies (as well as data we manually collected). The flask server would then return whether it was likely that the city would become a covid hotspot or not."},
			{"subheading": "Images"},
			{"src" : "spaceapps/pic1.png", "alt" : "main menu screen"},
			{"src" : "spaceapps/pic2.png", "alt" : "after submitting data on your city"},
			{"subheading":"Links"},
			{"link": "https://github.com/AadityaChaudhary/space_apps", "txt": "Github Link"}	
		]
	},

	{
		"title" : "FRC Robot",
		"time" : "2017-2020",
		"description" : "Developed code for 3 125 lb robots that competes in FRC competitions. The 2020 robot uses PIDF and computer vision to accurately shoot balls into an 8 foot high target. It was able to pickup and automatically indexballs, and rotate a colour wheel a specific number of times using a colour sensor.",
		"outline" : "from-red-400 to-blue-500",
		"tags": ["Java"],
		"expanded": [
			{"title" : "FIRST Robotics Competition"},
			{"subheading" : "2020"},
			{"desc" : "In 2020, I was the programming advisor and helped to design and implement the software for the robot. In 2020, the robot had to intake small balls and shoot them at a target 8 feet in the air. It also had to rotate a color wheel and hang off of a tilted bar. Our robot in 2020 had a turret and shooter system, a drivetrain, an intake. I played a part in the development and testing of each of these systems and also played a part in their integration."},
			{"desc" : "For the turret and shooter system we used a vision camera called LimeLight to identify the target 8 feet up. Using PID we were able to rotate the turret horizontal to face the target. Then. using the size of the target from the vision camera we were able to build a relation between the size of the target in the camera and the distance to the target. We were also able to find a relationship between the distance to the target and the required speed and vertical angle required to hit the target. Using these two systems we were able to build an automatic targeting system that could auto adjust as the robot was moving and accurately hit their target."},
		    {"desc" : " For the color wheel mechanism we used a colour sensor connected to the robot using I2C to detect the number of rotations the color had moved, as well as the current color that the wheel was on."},
			{"id" :"IZz9S-v6No0"},
			{"subheading" : "2019"},
			{"desc" : "In 2019 I was the programming lead and organized and ran the design subteam. I lead the overall design of the software and aided with the implementations of the software. I was responsible for the testing as well as the fixes to the software (sometimes requiring complete redesigns of the subsystems). The robot in 2019 had to pick up discs and large balls and put them in tall towers. "},
			{"desc" : "To accomplish this task, the robot had 4 main components that had to work together: the drivetrain, the vision camera, the 2 stage cascade elevator, and then claw. Due to poor visibility on the field, a lot of the actions the robot had to accomplish such as picking up discs from the “loading station” and placing them on their appropriate target, or putting balls in the appropriate target had to be automated using computer vision. I implemented a “driver assist” that allowed the robot to drive into the target, using the vision target. It used a PID feedback controller to keep the robot angled at the target as the driver drove in. Further on in the season, I decided to completely automate those tasks. I logged and compared the input from the vision target with the distance from the target, to build a relationship between the two. That allowed me to develop software that automatically drove the robot to the target, complete an action (such as scoring a disc) and and then drive away. This completely removed driver involvement in game actions and allowed the robot to score points faster than the drivers could, with very few errors. "},
			{"desc" : "The elevator was made using the built in motion profiling on our motor controllers as well as velocity PID. We found the necessary setpoints required of the elevator and allowed the drivers to join to those setpoints. We also gave the drivers manual control of the elevator, using position PID. This is because the elevator was extremely fast, so running it without some kind of feedback control was risky, as it could damage the system. We developed quite a few failsafes like that into the robot, so that the drivers didn’t need to worry about damaging the robot or operating it incorrectly. For example we noticed that the robot started to jerk around and begin tipping over if the elevator was at max height. So we added in software to limit the max speed of the robot based on the height of the elevator. We also added open loop ramps on the drive train to reduce jerking around or tipping over when the drivers stopped abruptly."},
			{"id" : "IsV1zJPFJCo"},
			{"subheading" : "2018"},
			{"desc" : "In 2018, I was a member of the software subteam on my robotics team. I was responsible for developing and maintaining software for a single subsystem. The game that year required the robot to pick up cubes from the ground and drop them into a tall scale as well as two small scales."},
			{"desc" : "The subsystem I was responsible for was the 2 stage cascading elevator. I implemented a state machine that managed the elevators change in state as it was going from one set point to another. I used PID to accurately get the elevator to go to its targets."},
			{"id" : "UbJgmk7SWtg"}
		]
	}

]
